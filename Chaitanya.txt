1)write a java code for sorting an array, and find number of occurrences of a particular number in java.

import java.util.*;

public class Sorting{  
    static void sort(int[] arr, int n){  
        int tmp = 0;  
        for(int i = 0; i < n; i++){  
            for(int j = 1; j < n - i; j++){  
                if(arr[j - 1] > arr[j]){  
                    tmp = arr[j-1];  
                    arr[j - 1] = arr[j];  
                    arr[j] = tmp;  
                }  
            }  
        }  
    }  
    public static void main(String[] args) {  
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Array Size :");
        int n = sc.nextInt();
        System.out.println("Enter Array Elements :");
        int arr[] = new int[n+1];
        for(int i = 0;i < n;i++){
            arr[i] = sc.nextInt();
        }
        
        sort(arr, n);
        System.out.println("Sorted Array :");
        for(int i= 0;i < n;i++){
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        System.out.println("Enter a number :");
        int num = sc.nextInt();
        int cnt = 0;
        for(int i = 0;i < n;i++){
            if(arr[i] > num)
            break;
            if(arr[i] == num)
            cnt += 1;
        }
        System.out.println("Number of occurrences : " + cnt);
    }
    
}


 2)write a java code to find the maximum element in array

import java.util.*;

public class MaxElement{  
    static void sort(int[] arr, int n){  
        int temp = 0;  
        for(int i = 0; i < n; i++){  
            for(int j = 1; j < n - i; j++){  
                if(arr[j - 1] > arr[j]){  
                    temp = arr[j-1];  
                    arr[j - 1] = arr[j];  
                    arr[j] = temp;  
                }  
            }  
        }  
    }  
    public static void main(String[] args) {  
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size of the array :");
        int n = sc.nextInt();
        System.out.println("Enter elements of the array :");
        int arr[] = new int[n+1];
        for(int i = 0;i < n;i++){
            arr[i] = sc.nextInt();
        }
        sort(arr, n);
        System.out.println("Maximum element : " + arr[n-1]);
    }
    
}

1)Create a base class Animal with a method makeSound(). Create two derived classes Dog and Cat that override the makeSound() method. Illustrate runtime polymorphism by creating objects of both derived classes and invoking the method.


class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    void makeSound() {
        System.out.println("Barks!");
    }
}

class Cat extends Animal {
    void makeSound() {
        System.out.println("Meow!");
    }
}

public class Polymorphism {
    public static void main(String[] args) {
        Animal animal = new Animal();
        Animal dog = new Dog();
        Animal cat = new Cat();
        animal.makeSound();
        dog.makeSound();
        cat.makeSound();
    }
}


2)Create a Java class MathOperations with overloaded methods for addition (add) that can accept two integers, three doubles, and two strings, respectively. Demonstrate the usage of these methods in the main method by adding two integers, three doubles, and concatenating two strings.

public class MathOperations{

    public int add(int a, int b) {
        return a + b;
    }
    
    public double add(double a, double b, double c){
        return a + b + c;
    }
    
    public String add(String a, String b){
        return a + b;
    }

    public static void main(String[] args){
        MathOperations op = new MathOperations();
        int sumInt = op.add(40, 30);
        System.out.println("Sum of two integers: " + sumInt);
        double sumDouble = op.add(17.9, 40.12, 17.31);
        System.out.println("Sum of three doubles: " + sumDouble);
        String concatenatedString = op.add("Hello, ", "How are you?!");
        System.out.println("Concatenation of two strings: " + concatenatedString);
    }
}